name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Adjust to your app's PHP version (from app/Dockerfile)
          extensions: mbstring, xml, mysqli # Add extensions your PHP app needs
          tools: composer
        # Consider adding caching for Composer dependencies:
        # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows

      - name: Install Composer dependencies (in ./app directory)
        working-directory: ./app # Assuming your composer.json is in the ./app directory
        run: composer install --prefer-dist --no-progress --no-interaction

      # 1. Static Application Security Testing (SAST) - Example with PHPStan
      # Ensure PHPStan is part of your composer dev-dependencies in ./app/composer.json
      # Or install it globally in the runner
      - name: Run PHPStan SAST
        working-directory: ./app
        # Adjust the command, path to analyze (e.g., src, lib), and level as needed
        # Example: run: ./vendor/bin/phpstan analyse src --level=5 --error-format=github
        # Using --error-format=github can surface findings directly in PRs
        run: |
          if [ -f "./vendor/bin/phpstan" ]; then
            ./vendor/bin/phpstan analyse . --level=1 --memory-limit=1G --error-format=github || echo "PHPStan found issues."
          else
            echo "PHPStan not found in ./app/vendor/bin. Skipping SAST."
          fi

      # 2. Dependency Scanning (SCA) - Example with Composer Audit
      - name: Run Composer Audit for vulnerabilities
        working-directory: ./app
        run: composer audit --locked # Checks composer.lock for known vulnerabilities

      # 3. Infrastructure as Code (IaC) Scanning - Example with Checkov for docker-compose.yml
      - name: Scan docker-compose.yml with Checkov
        uses: bridgecrewio/checkov-action@master # Or use a specific version like @v12
        with:
          file: docker-compose.yml
          framework: dockerfile # Checkov uses 'dockerfile' framework for compose files too
          # Soft fail for now, review findings and then set to hard fail if needed
          soft_fail: true 
          # To fail on issues, remove soft_fail: true or set it to false

      # 4. Build 'webapp' Docker image (required for image scanning)
      - name: Build webapp Docker image
        run: docker build -t my-webapp-image:${{ github.sha }} ./app

      # 5. Container Image Scanning - Example with Trivy
      - name: Scan 'webapp' image with Trivy
        uses: aquasecurity/trivy-action@0.20.0 # Use a specific version
        with:
          image-ref: 'my-webapp-image:${{ github.sha }}'
          format: 'table'
          exit-code: '0' # Set to '1' to fail on vulnerabilities
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL' # Comma-separated list of severities to scan for

      - name: Scan 'mysql:8.0' base image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'mysql:8.0'
          format: 'table'
          exit-code: '0' # Typically don't fail the build for base images immediately, but monitor.
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Scan WAF ('owasp/modsecurity-crs') image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'owasp/modsecurity-crs:4.13.0-nginx-202504070504'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

  # Dynamic Application Security Testing (DAST) - Example with OWASP ZAP Baseline Scan
  # This job would typically run after deploying to a staging/test environment.
  # It requires the application to be accessible via HTTP.
  dynamic_analysis:
    needs: security_checks # Example: run DAST only if other checks pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # You would need to handle your .env file for docker-compose here.
      # Best practice is to use GitHub Secrets for all sensitive values.
      - name: Create .env file for Docker Compose
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          # Add any other variables your docker-compose.yml expects

      - name: Start application stack using Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          # Implement a proper health check for your webapp on port 8080
          # This is a simple sleep, replace with a curl loop or similar
          sleep 90 

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080' # WAF endpoint
          # token: ${{ secrets.GITHUB_TOKEN }} # Optional: if you want to report issues to GitHub Security tab
          # docker_name: 'ghcr.io/zaproxy/zaproxy:stable' # ZAP Docker image
          # rules_file_name: '.zap/rules.tsv' # Optional: path to ZAP rules file
          cmd_options: '-a -j' # -a include alpha rules, -j AJAX spider
          # To fail the build if ZAP finds alerts:
          # fail_action: true

      - name: Stop application stack
        if: always() # Ensure services are stopped even if ZAP scan fails
        run: docker-compose down 